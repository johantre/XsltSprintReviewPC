<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="../style/slides.xsl"?>

<sprintreview folder="130918" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../style/sprint-review.xsd">
    <team name="Shebang">
        <productowner>Marius Swanepoel</productowner>
        <scrummaster>Johan Tré</scrummaster>
        <member>Thomas Martens</member>
        <member>Stefan De Smit</member>
        <member>Maciej Moczkowski</member>
        <member>Dominik Plichta</member>
        <member>Jürgen Reynaert</member>
    </team>

    <intro>
        <slides>
            <slide title="Technical Suite 3.0" type="sprint-intro">
                <img src="img/ShebangPOC.jpg" />        
            </slide>
        </slides>    
    </intro>

    <stories>
        <story title="Solve US data issues causing latency" state="story not-done" points="8" percentage-done="50" mksid="1457743">
            <slides>
                <slide type="story-context">
                    <h5>Goal: diagnose problems while processing UC3 with haystack-validation</h5>
                    <ul>
                        <li>C3PO connection pool deadlocks in CoreDB found and fixed</li>
                        <li>UMS processed properly</li>
                        <li>UC3 still not processed</li>
                        <li>some strange timeout / connection problems in log files</li>
                        <li>investigation of similar Bulk QA process also reading data from coredb
                    <ul>
                                <li>occurs that it was also not able to process correctly all UC3 tiles (what was totally acceptable there)</li>
                                <li>root causes may be same or similar</li>
                    </ul>
                        </li>
                        <li>we still do NOT have diagnosis of the problem</li>
                    </ul>
                </slide>
            </slides>
        </story>

       <story title="Tech 1: Update delta API (dummy based)" state="story done" points="8" mksid="1439830">
            <slides>
                <slide type="story-context">
                    <ul>
                        <li>Utility class needed to apply feature modifications to features.</li>
                    </ul>
                    <h5>Solution:</h5>
                    <ul>
                        <li>
                            Utility class to apply feature modifications added to 'common-features 4.6'.
                            <ul>
                            <li>
                                     com.tomtom.cpu.common.features.util.ModificationUtil
                            </li>
                            </ul>
                        </li>
                    </ul>
                    <pre class='prettyprint'>
    /**
     * Apply the {@link AssociationModification} to an {@link AbstractFeatureImpl}&lt;{@link Geometry}&gt;.
     * 
     * @param abstractFeature the {@link AbstractFeatureImpl}&lt;{@link Geometry}&gt; to apply the modification to
     * @param featureModification the {@link FeatureModification}
     */
    public static void applyFeatureModification(final AbstractFeatureImpl&lt;Geometry&gt; abstractFeature,
        final FeatureModification featureModification) {
        ...
    }
                    </pre>
                    <pre class='prettyprint'>
   /**
     * Creates an {@link AbstractFeatureImpl}&lt;{@link Geometry}&gt; from a given {@link FeatureModification}.
     * 
     * @param featureModification the {@link FeatureModification}
     * @return an {@link AbstractFeatureImpl}&lt;? extends {@link Geometry}&gt;
     */
    public static AbstractFeatureImpl&lt;? extends Geometry&gt; toAbstractFeature(final FeatureModification featureModification) {
        ...
    }

                    </pre>
                </slide>
                <slide type="story-context">
					<h5>What:</h5>
                    <ul>
                        <li>PDS is stored in HBase</li>
                        <li>All edits that are done on MDS should be applied in PDS</li>
                        <li>Should be fast enough</li>
                    </ul>
                    <h5>How:</h5>
                    <ul>
                        <li>PDS in HBase (key - value)</li>
						<li>Extra index table (feature-mortontiles)</li>
						<li>All FeatureModifications from MDS in SequenceFile</li>
						<li>Apply modifications to PDS (MR)</li>
                    </ul>
                </slide>
                <slide type="story-narrative">
                    <h5>Followed track:</h5>
                    <ul>
						<li>880.000 updates (FRC) on BEL</li>
						<li>easy approach : from a client apply updates 1 by 1</li>
							<ul><li>approx. 8hrs [1800 updates / minute]</li></ul>
                        <li>crunchjob (mapred) updates applied 1 by 1</li>
							<ul><li>approx. 2hrs [7300 updates / minute]</li></ul>
						<li>crunchjob optimized (mapred) updates in bulk</li>
							<ul><li>between 5 minutes - 30 minutes (becomes slower, to be investigated)
									[between 29300 - 175000 updates / minute]</li></ul>
						<li>also performed REAL FeatureModifications but low amount 
						   (UPDATE/CREATE/DELETE)</li>
                    </ul>
                </slide>
                <slide type="story-demo">
                    <h5>Demo slides</h5>
                    <ul>
                        <li><a target="_blanc" href="http://10.1.5.76:8080/">temporary demo link</a></li>
                    </ul>
                </slide>
            </slides>
        </story>

        <story title="Spatial filter deltas Design Timebox (3MD)" state="story done" points="2" mksid="1439726">
            <slides>
                <slide type="story-context">
                    <h5>Why do we need getDelta in CDP api?</h5>
                    <ul>
                        <li>customer should be able to update map previously fetched by getFeatures CDP api to new version</li>
                        <li>applying only map changes (deltas) is much more effective than re-fetching whole map</li>
                        <li>NDS as example client of delta api</li>
                        <li>possibly can be used to sync MDS and PDS (to be designed)</li>
                    </ul>
                    <h5>Why spatial filtering in Feature Stream delta in coredb?</h5>
                    <ul>
                        <li>CDP api (both getFeatures as getDelta) provides streaming content (map or deltas) for particular region (zone)</li>
                        <li>CDP stack needs to fetch deltas from CPP but limited to specified geometry - zone specified as input to CDP api</li>
                    </ul>
                </slide>
                <slide type="story-narrative">
                    <h5>How to extend coredb Feature Stream Delta with spatial filtering?</h5>
                    <ul>
                        <li>design notes on <a href="http://vos.intra.local/display/CPEDPT/Spatial+FeatureStream+Delta">page</a> </li>
                        <li>extend current getDeltas with SpatialFilter</li>
                        <li>simple implementation first to have E2E process running soon</li>
                        <li>more sophisticated spatial indexing of delta only if first impl is too slow</li>
                        <li>collapsed spatial getDelta between two versions can be added later if required</li>
                    </ul>
                    <h5>Spatial getDeltas: (to implement now)</h5>

                    <pre class="prettyprint">
Iterator&lt;Pair&lt;TransactionInfo, Iterator&lt;FeatureModification&gt;&gt;&gt; getDeltas(SpatialFilter spatialFilter, Version versionFrom, Version versionTo);
Iterator&lt;Pair&lt;TransactionInfo, Iterator&lt;FeatureModification&gt;&gt;&gt; getDeltas(SpatialFilter spatialFilter, Version versionFrom, Version versionTo, Branch branch);
                    </pre>
                    <h5>getDelta between two versions: (not on critical path)</h5>
                    <pre class="prettyprint">
Iterator&lt;FeatureModification&gt; getDelta(SpatialFilter spatialFilter, Version versionFrom, Version versionTo);
Iterator&lt;FeatureModification&gt; getDelta(SpatialFilter spatialFilter, Version versionFrom, Version versionTo, Branch branch);
                    </pre>
                </slide>
            </slides>
        </story>

        <story title="Tech 2: Update delta API (dummy based) part 1" state="story not-done" points="8" percentage-done="66" mksid="1439832">
            <slides>
                <slide type="story-context">
                    <h5>Apply feature modifications, using hdfs as backend storage.</h5>
                    <ul>
                        <li>
                            The story was devided into parts:
                            <ul>
                                <li>
                                    part 1: Apply feature modifications 'on the fly' (similar to MDS);
                    <ul>
                                        <li>base map (file) containing the features.</li>
                                        <li>map (file) containing the featrure modifications.</li>
                    </ul>
                                </li>
                                <li>
                                    part 2: Update the base map after a given number of transactions;
                    <ul>
                                        <li>make new basline from old map + modifications.</li>
                    </ul>
                            </li>
                            </ul>
                        </li>
                    </ul>
                    <img src='img/featmod_otf_1.png'/>
                </slide>
                <slide type="story-narrative">
                    <h5>Followed track:</h5>
                    <ul>
                        <li>880.000 updates (FRC) on BEL</li>
                        <li>easy approach : Product create job</li>
                    <ul>
                            <li>feature modification layer processor applying the updates on the fly (one by one)</li>
                            <li>random access needed to the map file containing the modifications = slow</li>
                            <li>approx. 20 minutes [44000 updates / minute]</li>
                    </ul>
                        <li>todo : Hadoop (Crunch) job</li>
                    <ul>
                             <li>joining the two map files (key = uuid) using the Hadoop framework</li>
                             <li>no random access needed, full read of both map files = should be faster</li> 
                        </ul>
                    </ul>
                </slide>
            </slides>
        </story>

        <story title="Implement delta API in CDB (in parallel) part 1" state="story done" points="5" mksid="1439709">
            <slides>
                <slide type="story-context">
                    <h5>Goals</h5>
                    <ul>
                        <li>add SpatialFilter to getDeltas API in coredb</li>
                        <li>provide simple implementation on coredb side</li>
                    </ul>
                    <h5>Not in scope for current sprint, but still TODOs</h5>
                    <ul>
                        <li>geometry clipping in delta API
                    <ul>
                                <li>both getFeatures and getDelta CDP return only data that belongs to specified zone</li>
                                <li>when feature is on border of two zones it's modified geometry should be clipped to the zone that client's map contains</li>
                                <li>when client applies delta, it's final content should be equal to new map of the zone - without "out zone" geometries</li>
                                <li>needed for target state, not for "Release MDS as PDS" as zones will be countries and seaming will be on continent level</li>
                    </ul>
                        </li>
                        <li>integration with CDP stack and E2E tests</li>
                        <li>performance tests</li>
                    </ul>
                </slide>
                <slide type="story-context">
                    <h5>Implementation</h5>
                    <ul>
                        <li>new API added to coredb client as described in design story</li>
                        <li>spatial filtering added in coredb-main-ws
                    <ul>
                                <li>all FSIndex entries are fetched from DB but manually filtered on service level</li>
                    </ul>
                        </li>
                        <li>FAT tests created for new functionality</li>
                    </ul>
                </slide>
            </slides>
        </story>


    </stories>
</sprintreview>
