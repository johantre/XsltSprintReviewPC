<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="../style/slides.xsl"?>

<sprintreview id="01">
    <team name="Shebang">
        <productowner>Marius Swanepoel</productowner>
        <scrummaster>Johan Tré</scrummaster>
        <member>Thomas Martens</member>
        <member>Stefan De Smit</member>
        <member>Maciej Moczkowski</member>
        <member>Dominik Plichta</member>
        <member>Jürgen Reynaert</member>
    </team>
    <intro title="Technical Suite 3.0">
        <slides>
            <slide type="sprint-intro">
                <img src="img/ShebangPOC.jpg" />        
            </slide>
            <slide type="sprint-intro">
                <h5>Milestone 3.1 is about enabling fresher map deliveries by:</h5>
                <ul>
                    <li class="fragment">update released data in between quarters on MDS</li>
                    <li class="fragment">build products containing these updates</li>                                 
                    <li class="fragment">deliver deltas via CDP-api</li>
                </ul>                                 
            </slide>
            <slide type="sprint-goal">
                <h4><a href="http://besrvup-mks01.ta.global:7001/im/issues?selection=1421509">Release MDS as PDS</a></h4>
                <h5>To deliver updated data &amp; deltas</h5>
                <ul>                   
                    <li>MDS must be the source to build products(=PDS)</li>
                    <li>Versioned MDS data must be available</li>
                    <li>CDP-delta-api must be developed on top of coredb delta</li>
                </ul>             
            </slide>
            <slide type="sprint-goal">
                <h4><a href="http://besrvup-mks01.ta.global:7001/im/issues?selection=1363015">PDS as proof of concept</a></h4>
                <h5>MDS vs PDS</h5>
                <blockquote class="fragment">
                    <ul>                   
                        <img src="img/postgresql_logo.jpg" height="80" style="display: inline-block; vertical-align:text-top; float:right;"/>
                        <li>main focus: editing (production)</li>
                        <li>optimized for latency (quick response)</li>
                        <li>each transaction is a version</li>
                    </ul>
                </blockquote>
                <blockquote class="fragment">
                    <ul>                   
                        <img src="img/hadoop-logo-square.jpg" height="100" style="display: inline-block; vertical-align:text-top; float:right;"/>
                        <li>main focus: bulk read (product create)</li>
                        <li>optimized for throughput</li>
                        <li>only versions used to build a product are important (monthly, weekly, daily)?</li>
                    </ul>
                </blockquote>                 
            </slide>
            <slide type="sprint-goal">
                <h4>Non Functional requirements for CDP/PDS</h4>
                <ul>                   
                    <li>Build a continental product in 12 hours</li>
                    <li>Contains fresh data (MDS with small delay)</li>
                    <li>Must be versioned</li>
                </ul>                      
            </slide>
            <slide type="sprint-goal">
                <h4>Proof of concept limitations</h4>
                <p>To timebox the POC, extra limitations for this POC are added</p>
                <ul>                   
                    <li><a href="http://hadoop.apache.org/">hadoop</a> based</li>
                    <li>Tile based</li>
                </ul>
                <p class="fragment"><b>If this doesn't meet the NFR, other POC might follow.</b></p>                   
            </slide>          
        </slides>    
    </intro>
    <stories>
        <story title="Get Ver. Data: Unifying 2 code paths (Build Filtering CDB)" state="story done" points="5">
            <slides>
                <slide type="story-context">
                    <h5>Tile based content reading needed to use Release MDS as PDS</h5>
                    <p>Requirements for coredb:</p>
                    <ul>
                        <li>tile retrieval</li>
                        <li>getting transactional data (VMDS) with defined version</li>
                        <li>filtering capabilities</li>
                        <li>geometry clipping</li>
                        <li>getting stubs (ID + type) for associated features that are out of tile</li>
                    </ul>
                </slide>
                <slide type="story-narrative">
                    <h5>Unify getFeatures and getFeaturesInTile code paths in coredb - why?</h5>
                    <ul>
                        <li>a lot of similarities and duplicated code</li>
                        <li>getFeaturesInTile missed filtering capabilities of getFeatures</li>
                        <li>getFeaturesInTile was not mature - especially reading transactional data (VMDS)</li>
                        <li>existing getFeatures path is mature, versioned data reading (VMDS) is well tested</li>
                        <li>better have one generic api than maintain two - clearer code and less bugs</li>
                    </ul>
                </slide>
                <slide type="story-narrative">
                    <h5>Unify getFeatures and getFeaturesInTile code paths in coredb - how?</h5>
                    <ul>
                        <li>getFeatures api revised - generic query method with parameters object has been added</li>
                        <li>builder to build parameters has been introduced</li>
                        <li>old getFeatures methods marked as @deprecated, some removed</li>
                        <li>AllClippedGeometryLimitFilter has been implemented to support geometry clipping</li>
                        <li>TileFilter has been added to add tile base retrieval along to bbox/polygon</li>
                    </ul>
                    <pre><code>

                        SpatialFilter spatialFilter = SpatialFilterBuilder.newBuilder().withTile(tile)
                            .build();

                        Parameters parameters = ParametersBuilder.newBuilder().withSpatialFilter(spatialFilter)
                            .withGeometryLimitFiler(GeometryLimitFilterFactory.createAllClippedGeometryFilter())
                            .build();

                        List&lt;Feature&lt;? extends Geometry&gt;&gt; features = read.getFeatures(parameters);
                    </code></pre>
                </slide>
                <slide type="story-narrative">
                    <h4>Integration with CDP components</h4>
                    <h5>haystack-mdsloader modifications</h5>
                    <ul>
                        <li>new coredb tile retrieval api used</li>
                        <li>FeaturesStubLoadingStrategy used to load stubs of associated out of tile features in one batch - <font color="red">part of future user story done now:)</font></li>
                        <li>release parameter used to specify branch and version of CPP data to read</li>
                    </ul>
                    <h5>haystack-validation modifications</h5>
                    <ul>
                        <li>CPP created features included in validation results (IDs filtering)</li>
                        <li>same for global partition (XXX) features</li>
                    </ul>
                </slide>
                <slide type="story-narrative">
                    <h4>end2end tests with haystack-validation</h4>
                    <ul>
                        <li>Staging hadoop cluster used (Ghent)</li>
                        <li>Coredb stack deployed on local notebook (Lodz) - no environment yet</li>
                        <li>haystack-validation GDF output compared with MDS output</li>
                    </ul>
                    <img src="img/validation.png" style="padding-top: 15px" alt="validation"/>
                </slide>
                <slide type="story-narrative">
                    <h4>end2end tests - non transactional tests (pure MDS)</h4>
                    <ul>
                        <li>YG1, YG2, YG4, YKO, YHU datasets of hakuna matata used</li>
                        <li>YG3, YW1, YW2 too big to test with local notebook</li>
                    </ul>
                    <h5>Results</h5>
                    <ul>
                        <li>Additional associations present in GDF data - <font color="blue">correct</font> as they are eliminated later in process as being duplicates</li>
                        <li>Different order of geometries in GeometryCollection for complex features - <font color="blue">correct</font> as order of geometries in geometry collection is not defined</li>
                        <li><font color="blue">In all other means GDF and MDS output matches - CPP/CDP stack works with non transactional data</font></li>
                    </ul>
                </slide>
                <slide type="story-narrative">
                    <h4>end2end tests - transactional tests (MDS and VMDS)</h4>
                    <ul>
                        <li>YG1 dataset of hakuna matata used</li>
                        <li>Cartopia used to create some transactions</li>
                        <li>QA mock used to be able to commit data</li>
                        <li>as no cascading edits nor Cartopia are ready yet only few simple edits could be made</li>
                    </ul>
                    <h5>Results</h5>
                    <ul>
                        <li>expected changes in MDS output has been found when comparing with GDF output</li>
                        <li>content not modified in transaction still matches in MDS and GDF output</li>
                        <li><font color="blue">This tests shows CPP/CDP stack works with transactional data</font></li>
                    </ul>
                </slide>
                <slide type="story-narrative">
                    <h4>end2end tests - conclusions</h4>
                    <blockquote class="fragment">CPP/CDP stack is able to read versioned/transactional data</blockquote>
                    <blockquote class="fragment">small datasets and low number of transactions makes our validation a smoke test</blockquote>
                    <blockquote class="fragment">performance and stability impact of reading big datasets is not known</blockquote>
                    <blockquote class="fragment">testing on larger amount of transactions is advised when editing is available again in CPP and Cartopia</blockquote>
                </slide>
            </slides>
        </story>        
        <story title="Tech 1: Build simple PDS from it." state="story done" points="0">
            <slides>
                <slide type="story-context">
                    <h4><a href="http://hbase.apache.org/"><img style="display: inline-block; vertical-align:text-top;" height="50" src="img/hbase-logo.jpg"/></a></h4>
                    <h5>Pro's</h5>
                    <ul>
                        <li>The hadoop database</li>
                        <li>Used before, so known territory</li>
                        <li>Supports versioning</li>
                    </ul>
                    <h5>Con's</h5>
                    <ul>
                        <li>Time based versioning is different</li>
                        <li>Hbase stability is sometimes questioned</li>
                    </ul>
                </slide>
                <slide type="story-narrative">
                    <h5>Implementation: <a href="http://besrvut-hdn03:60010/table.jsp?name=pds_features" target="blanc">Hbase table</a></h5>
                    <br/>
                    <ul>
                        <li>
                            Row Key: Morton base 4 + Feature Id + Zone Name
                            <ul>
                                <li>Morton base 4: Enabler for table scans on different (higher) Morton tile levels.</li>
                                <li>Feature Id: The uuid of the feature (stored as 2 longs).</li>
                                <li>Zone Name: Makes the row key unique for seamed features on a tile border.</li>
                            </ul>
                        </li>
                        <li>
                            Column family: The model name of the feature.
                            <ul>
                                <li>Enabler for retrieving sub models.</li>
                            </ul>
                        </li>
                        <li>
                            Colum Qualifier: The type of the feature.
                            <ul>
                                <li>Enabler for retrieving specific types.</li>
                            </ul>
                        </li>
                        <li>
                            Value: feature serialized in <a href="http://avro.apache.org/"><img style="display: inline-block; vertical-align:text-top;" height="30" src="img/Avro.png" /></a>
                        </li>
                    </ul>
                </slide>
                <slide type="story-demo">
                    <h4>HBase schema</h4>
                    <img src="img/hbase1.png" alt="hbase" />
                </slide>
            </slides>
        </story>

        <story title="Tech 2: Build simple PDS from it." state="story done" points="8">
            <slides>
                <slide type="story-context">
                    <h4><a href="http://hadoop.apache.org/"><img style="display: inline-block; vertical-align:text-top;" height="50" src="img/hadoop-logo.jpg"/></a>hdfs files</h4>
                    <h5>Pro's</h5>
                    <ul>
                        <li>Simple setup: just hadoop</li>
                        <li>Most likely, fastest solution</li>
                    </ul>
                    <h5>Con's</h5>
                    <ul>
                        <li>Append only files:
                            <ul>
                                <li>difficult to load in different steps</li>
                                <li>update means rewrite whole file</li>
                                <li>risk to rewrite hbase to support versioning</li>
                            </ul>
                        </li>                        
                    </ul>
                </slide>
                <slide type="story-narrative">
                    <h5>Implementation: <a href="http://besrvut-hdp07.ttg.global:50075/browseDirectory.jsp?dir=%2Fuser%2Fmartens%2Fhdfs-features-BEL&amp;namenodeInfoPort=50070" target="blanc">Standard Mapfile on higher level morton tile</a></h5>
                    <br/>
                    <ul>
                        <li>
                            Key: Morton base 4 + Feature Id + Zone Name
                            <ul>
                                <li>Morton base 4: Enabler for reads on different (higher) Morton tile levels.</li>
                                <li>Feature Id: The uuid of the feature (stored as 2 longs).</li>
                            </ul>
                        </li>
                        <li>
                            Value: feature serialized in <a href="http://avro.apache.org/"><img style="display: inline-block; vertical-align:text-top;" height="30" src="img/Avro.png" /></a>
                        </li>
                    </ul>
                </slide>                
            </slides>
        </story>
        <story title="">
            <slides>
                <slide type="story-demo">
                    <h5>Size comparison</h5>
                    <style type="text/css">
                        table.tftable {font-size:12px;color:#333333;width:100%;border-width: 1px;border-color: #9dcc7a;border-collapse: collapse;}
                        table.tftable th {font-size:12px;background-color:#abd28e;border-width: 1px;padding: 8px;border-style: solid;border-color: #9dcc7a;text-align:left;}
                        table.tftable tr {background-color:#ffffff;}
                        table.tftable td {font-size:12px;border-width: 1px;padding: 8px;border-style: solid;border-color: #9dcc7a;}
                    </style>

                    <table class="tftable" border="1">
                        <tr>
                            <th>Dataset</th>
                            <th>VPDS (GDF + TIF)</th>
                            <th>MDS</th>
                            <th>HBASE</th>
                            <th>HDFS</th>
                        </tr>
                        <tr>
                            <td>BEL</td>
                            <td>~14G</td>
                            <td>~20G</td>
                            <td>~4G</td>
                            <td>~4.4G</td>
                        </tr>
                        <tr>
                            <td>UC3</td>
                            <td>~38G</td>
                            <td>~101G</td>
                            <td>~8.5G</td>
                            <td>~8.5G</td>
                        </tr>
                        <tr>
                            <td>AK1</td>
                            <td>~14.5G</td>
                            <td>~13G</td>
                            <td>~13G</td>
                            <td>n/a</td>
                        </tr>
                    </table>
                    <br/>
                    <h5>Summary</h5>
                    <blockquote class="fragment">Smaller footprint than GDF and MDS</blockquote>
                    <blockquote class="fragment">Similar footprint for sparse big areas because of the many tiles</blockquote>                  
                  </slide>
                  <slide type="story-demo">
                    <h5>Read time comparison</h5>
                    <style type="text/css">
                        table.tftable {font-size:12px;color:#333333;width:100%;border-width: 1px;border-color: #9dcc7a;border-collapse: collapse;}
                        table.tftable th {font-size:12px;background-color:#abd28e;border-width: 1px;padding: 8px;border-style: solid;border-color: #9dcc7a;text-align:left;}
                        table.tftable tr {background-color:#ffffff;}
                        table.tftable td {font-size:12px;border-width: 1px;padding: 8px;border-style: solid;border-color: #9dcc7a;}
                    </style>

                    <table class="tftable" border="1">
                        <tr>
                            <th>Zone</th>
                            <th>#Mappers</th>
                            <th>VPDS (GDF + TIF)</th>
                            <th>#Mappers</th>
                            <th>HBASE</th>
                            <th>HDFS</th>
                        </tr>
                        <tr>
                            <td>BEL</td>
                            <td>733</td>
                            <td>25m</td>
                            <td>52</td>
                            <td>6m30</td>
                            <td>5m26</td>
                        </tr>
                        <tr>
                            <td>UC3</td>
                            <td>652</td>
                            <td>1h23m</td>
                            <td>46</td>
                            <td>13m45</td>
                            <td>12m01</td>
                        </tr>
                        <tr>
                            <td>AK1</td>
                            <td>316</td>
                            <td>31h14m</td>
                            <td>24</td>
                            <td>1h44m</td>
                            <td></td>
                        </tr>
                        <tr>
                            <td>California</td>
                            <td>n/a</td>
                            <td>n/a</td>
                            <td>192</td>
                            <td>31m</td>
                            <td>28m</td>
                        </tr>
                    </table>
                </slide>
            </slides>
        </story>

        <story title="">
            <slides>
                <slide type='story-timeline'>
                    <img src="img/timeline.jpg" alt="demo: diff" />
                </slide>
                <slide type='whats-next'>
                    <blockquote class="fragment">CDP Delta API</blockquote>
                    <blockquote class="fragment">Versioning support in PDS</blockquote>
                    <blockquote class="fragment">Technology 3: Titan</blockquote>
                </slide>
            </slides>
        </story>
    </stories>
</sprintreview>
