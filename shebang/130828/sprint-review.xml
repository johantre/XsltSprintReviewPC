<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="../style/slides.xsl"?>

<sprintreview id="02">
    <team name="Shebang">
        <productowner>Marius Swanepoel</productowner>
        <scrummaster>Johan Tré</scrummaster>
        <member>Thomas Martens</member>
        <member>Stefan De Smit</member>
        <member>Maciej Moczkowski</member>
        <member>Dominik Plichta</member>
        <member>Jürgen Reynaert</member>
    </team>
    
    <intro title="Milestone 3.0">
        <slides>
            <slide type="sprint-intro">
                <img src="img/ShebangPOC.jpg" />        
            </slide>
        </slides>    
    </intro>
    
    <stories>
        <story title="Solve the feature stubbing on TX data" state="story done" points="8" mksid="1439667">
            <slides>
                <slide type="story-context">
                    <h5>What are feature stubs?</h5>
                    <ul>
                        <li>Lightweight feature representation that contains only ID and featureType</li>
                    </ul>
                    <h5>CDP requirement for getFeatures(tileFilter) from CPP</h5>
                    <ul>
                        <li>all features in tile should be returned with clipped geometries</li>
                        <li>associations objects are returned - ID and type of both ends should be accessible</li>
                        <li>out of tile associated feature should be represented by "stub" (in order to process association object correctly)</li>
                    </ul>
                </slide>
                <slide type="story-narrative">
                    <h5>Stubbing implementation:</h5>
                    <ul>
                        <li>getFeatures(tileFilter) does NOT return feature stubs</li>
                        <li>FeaturesStubLoadingStrategy used to lazy load stubs
                            <ul>
                                <li>determines IDs of missing associated features</li>
                                <li>loads stubs at one batch using getObjectsByIds endpoint in coredb</li>
                            </ul>
                        </li>
                        <li>beta version made last sprint</li>
                    </ul>
                    <h5>What was missing and solved:</h5>
                    <ul>
                        <li>proper versioned data handling in getObjectsByIds (VMDS)</li>
                        <li>FAT tests recovered and some new added</li>
                        <li>l-Rule removed from getFeatures call as no longer needed</li>
                    </ul>
                </slide>
                <slide type="story-narrative">
                    <h5>Testing CPP/CDP stack on larger datasets:</h5>
                    <ul>
                        <li>last sprint only Hakuna-Matata datasets were tested</li>
                        <li>We were able to use L2 to run tests on BEL
                            <ul>
                                <li>it tooks 65min to process BEL on L2</li>
                                <li>haystack-validation was used to check output content</li>
                                <li>some minor content problems were detected due to strange behaviour of PostGIS/Geos</li>
                                <li>fix implemented in db-reader to get correct content :)</li>
                            </ul>
                        </li>
                        <li>We were NOT able successfully process UC3</li>
                    </ul>
                </slide>
            </slides>
        </story>

        <story title="Working Solution: improved > #associations down!" state="story done" points="5" mksid="1439619">
            <slides>
                <slide type="story-context">
                    <h5>Goals of the story</h5>
                    <ul>
                        <li>Up to now we retrieved complete data for each tile</li>
                        <li>But there is a lot duplication! For example:
                            <ul>
                                <li>AdminArea9 is returned in many tiles</li>
                                <li>Complete set of associations is also returned</li>
                                <li>but we need only RoadElementInAdminArea9 associations to roads in current tile!</li>
                                <li>we will get other RoadElementInAdminArea9 associations while processing rest of tiles</li>
                            </ul>
                        </li>

                    </ul>
                    <center><img style="" src="img/assocFilter.png" height="350"/></center>

                </slide>
                <slide type="story-narrative">
                    <h5>Implementation:</h5>
                    <ul>
                        <li>ExcludeAssociationForFeatureTypeFilter added to coredb-client
                            <ul>
                                <li>for each feature type you can define which associations should be excluded</li>
                                <li>associations are filtered while reading from both MDS and VMDS</li>
                            </ul>
                        </li>
                        <pre><code>
ExcludeAssociationForFeatureTypeFilter associationForFeatureTypeFilter
    = ExcludeAssociationForFeatureTypeFilterBuilder.newBuilder()
        .forGivenFeatureTypes(ttom.TTOM_Core.FEATURES.Order9Area)
            .excludeAssociationTypes(ttom.TTOM_Core.ASSOCS.RoadElementInOrder9Area, ttom.ASSOCS.FaceOfOrder9Area)
        .forGivenFeatureTypes(ttom.TTOM_Core.FEATURES.Order8Area)
            .excludeAssociationTypes(ttom.TTOM_Core.ASSOCS.RoadElementInOrder8Area)
        .build();
                        </code></pre>
                    </ul>
                </slide>
                <slide type="story-narrative">
                    <h5>Integration and tests:</h5>
                    <ul>
                        <li>haystack-mdsloader has been adapted to use new filtering api</li>
                        <li>haystack-validation has been run on BEL
                            <ul>
                                <li>correct content is still produced</li>
                                <li>processing time reduced to 35min (half of original time!)</li>
                                <li>for now only few association types has been excluded - tuning still possible</li>
                            </ul>
                        </li>
                        <li>UC3 still not processed correctly - further investigation planned</li>
                    </ul>
                </slide>
            </slides>
        </story>

        <story title="Implement delta API in P.C." state="story done" points="8" mksid="1439707">
            <slides>
                <slide type="story-context">
                    <h5>What is firehose?</h5>
                    <ul>
                        <li>firehose is a protocol, implementing a common set of rules and instructions, enabling computers to communicate with each-other.</li>
                            <ul>
                                <li>server: haytack-server</li>
                                <li>client: feature retriever client</li>
                                <li>instructions: open a session, get firehose objects (e.g features), close session.</li>
                            </ul>
                        
                        <li>Current instructions:</li>
                            <ul>
                                <li>openSession(where, what, when)</li>
                                <li>retrieveFeatures(sessionid, count)</li>
                                <li>closeSession(sessionid)</li>
                            </ul>

                        <li>New instructions:</li>
                            <ul>
                                <li>openModificationSession(where, what, when, when)</li>
                                <li>retrieveFeatureModifications(sessionid, count)</li>
                                <li>closeSession(sessionid)</li>
                            </ul>

                        <li>firehose modules:</li>
                            <ul>
                                <li>firehose-client: client to retrieve firhose objects.</li>
                                <li>firehose-io: streaming features over the wire (serializing, deserializing)</li>
                                <li>firehose-rpc: remote procedure call (instructions)</li>
                            </ul> 
                    </ul>

                    <p></p>
                    <h5>Documentation:</h5>
                    <ul>
                        <li><a href="http://vos/display/CPEMPE/CDP+Delta+API">The delta API on Confluence</a></li>
                    </ul>
                </slide>
                <slide type="story-narrative">
                    <h5>Goals:</h5>
                    <ul>
                        <li>Retrieve feature modifications through the firehose.</li>
                        <li>Focus on the protocol (where and what is not used yet).</li>
                    </ul>
                    <p></p>
                    <h5>Code example:</h5>
                    <pre>
                        <code>
final FeatureRetriever&lt;ZoneFilter, ModelFilter, ReleaseFilter&gt; featureRetriever = new FeatureRetrieverClient(config);
...
final ReleaseFilter releaseFilterFrom = new ReleaseFilter("1");
final ReleaseFilter releaseFilterTo = new ReleaseFilter("1");

final FirehoseStream&lt;FeatureModification&gt; featureModifications =
    featureRetriever.getFeatureModifications(where, what, releaseFilterFrom, releaseFilterTo);

while (featureModifications.hasNext()) {
    final FeatureModification featureModification = featureModifications.next();
    System.out.println(featureModification);
}

featureModifications.close();
                        </code>
                    </pre>
                    
                    <p></p>
                    <h5>Output:</h5>
                    <pre>
                        <code>
Feature DictionaryFeature[model: TTOM namespace: TTOM-Topology name: Edge] with id 9abc333a-25d8-4cde-9810-accae9bf20c0 was CREATED

Association modification:
   [AssociationModificationImpl[951926d2-0318-468f-9908-9345682847bd EdgeHasEndNode type=CREATED src=9abc333a-25d8-4cde-9810-accae9bf20c0 trg=e784affd-f6e4-4f29-8c6e-3b9c4ee6e571 seq=0],
    AssociationModificationImpl[f3b3a94a-2202-4287-94d6-973d623208af EdgeOfRoadElement type=CREATED src=d76d28ce-65b1-4543-9f07-777fd7b1fa30 trg=9abc333a-25d8-4cde-9810-accae9bf20c0 seq=1],
    AssociationModificationImpl[9dc7a9f7-e8d3-4169-bd3a-4ea3e6dff9d0 EdgeHasBeginNode type=CREATED src=9abc333a-25d8-4cde-9810-accae9bf20c0 trg=00004245-4c00-0100-0000-0000000c5841 seq=0]]

Attribute modification: null

Geometry modification: GeometryModificationImpl[afterstate = [36830214 510247669, 36831233 510255648, 36831427 510256955, 36831955 510257851, 36833060 510258937, 36854955 510275479], beforestate = null, modificationtype = CREATED]
                        </code>
                    </pre>

                </slide>
            </slides>
        </story>

        <story title="Tech 3: Build simple PDS from it" state="story done" points="8" mksid="1439816">
            <slides>
                <slide type="story-context">
                    <h4>Titan <a href="http://http://thinkaurelius.github.io/titan/"><img style="display: inline-block; vertical-align:text-top;" height="100" src="img/titan-logo.png"/></a></h4>
                    <h5>Pro's</h5>
                    <ul>
                        <li>Graph database, so could also be used by QA-team</li>
						<li>implements blueprints interface (already used by QA-team in Neo4j)</li>
						<li>Can work on different underlying storages, including hBase</li>
                    </ul>
					<br/><br/>
                    <h5>Con's</h5>
                    <ul>
                        <li>New technology, so pretty unknown</li>
                        <li>Lots of (stability) issues during testing</li>
                    </ul>
                </slide>
                <slide type="story-narrative">
                    <h4>Steps we did for this Poc</h4>
                    <br/>
					<ul>
						<li>dumped data from GDF to Graphson (features only, no associations)</li>
						<ul>
							<li>full features (not partial as in Tech1 &amp; 2) as vertex</li>
							<li>partial geometry on the edge(link)</li>
							<li>features stored in Titan as jSON (AVRO in Tech 1 &amp; 2)</li>
						</ul>
						<li>load data into Titan (hBase storage)</li>
						<li>read data back from Titan</li>
						<li>haystack-validation</li>
					</ul>
                </slide>
                <slide type="story-demo">
                    <h4>Tests done</h4>
					<ul>
						<li><h5>YG1 (part of Ghent)</h5>					
							<ul>
								<li>Graphson file : 10MB</li>	
								<li>load into Titan : &lt; 1min</li>
								<li>Haystack-validation on GDF : 4min15sec</li>
								<li>Haystack-validation on Titan : 3min20sec</li>
							</ul>
						</li>
						<li><h6>BEL</h6>
							<ul>
								<li>Graphson file : 8GB</li>
								<li>load into Titan : multiple crashes after 1 - 2 hrs.</li>
								<ul>
									<li>memory</li>
									<li>connection lost</li>
									<li>elastisearch crash</li>
									<li>hardware errormessage</li>
									<li>....</li>
								</ul>
							</ul>
						</li>
					</ul>
                </slide>
				 <slide type="story-demo">
                    <h4>Conclusion</h4>
					<ul>
						<li>not usable as it is right now</li>
						<li>would need more effort to find out the different crash causes</li>
						<li>for the productcreate team we don't see an immediate advantage in continuing with this technology</li>
						<li>if other teams want to investigate further we can share our findings</li>
					</ul>
                </slide>
            </slides>
        </story>

        <story title="">
            <slides>
                <slide type='whats-next'>
                    <blockquote class="fragment">Continuation of Delta API</blockquote>
                    <blockquote class="fragment">Investigation on infrastructural latency</blockquote>
                    <blockquote class="fragment">Apply deltas on PDS </blockquote>
                </slide>
            </slides>           
        </story>
    </stories>
</sprintreview>
